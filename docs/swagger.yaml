basePath: /
definitions:
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Task:
    properties:
      endTime:
        type: string
      id:
        type: integer
      startTime:
        type: string
      taskName:
        type: string
      userID:
        type: integer
    type: object
  models.User:
    properties:
      address:
        type: string
      id:
        type: integer
      name:
        type: string
      passport_number:
        type: string
      patronymic:
        type: string
      surname:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample time tracker server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Time Tracker API
  version: "1.0"
paths:
  /user:
    post:
      consumes:
      - application/json
      description: Add a new user with the given passport number
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Failed to save user to database
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Add a new user
      tags:
      - users
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Failed to delete user
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data to update
        in: body
        name: user
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Invalid JSON format
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Failed to update user
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update a user
      tags:
      - users
  /user/{id}/tasks:
    get:
      consumes:
      - application/json
      description: Get all tasks for the user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "404":
          description: No tasks found for the user
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Failed to fetch tasks
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get user tasks
      tags:
      - tasks
  /user/{userID}/tasks/finish:
    put:
      consumes:
      - application/json
      description: Finish the active task for the user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
        "404":
          description: No active task found for the user
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Failed to finish task
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Finish active task
      tags:
      - tasks
  /user/{userID}/tasks/sort:
    get:
      consumes:
      - application/json
      description: Sort user tasks by duration in descending order
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      - description: Start time filter (RFC3339 format)
        in: query
        name: start_time
        required: true
        type: string
      - description: End time filter (RFC3339 format)
        in: query
        name: end_time
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Failed to retrieve tasks
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Sort user tasks
      tags:
      - tasks
  /user/{userID}/tasks/start:
    post:
      consumes:
      - application/json
      description: Start a new task for the user
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Task'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Start a new task
      tags:
      - tasks
  /users:
    get:
      consumes:
      - application/json
      description: Get users with filtering and pagination
      parameters:
      - description: Passport Number
        in: query
        name: passportNumber
        type: string
      - description: Surname
        in: query
        name: surname
        type: string
      - description: Name
        in: query
        name: name
        type: string
      - description: Patronymic
        in: query
        name: patronymic
        type: string
      - description: Address
        in: query
        name: address
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Invalid pageSize parameter
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: No users found with specified filters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get users
      tags:
      - users
swagger: "2.0"
